pool:
  name: 'shared-services-docker'
variables:
  - group: boisestate.ai
stages:
- stage: Build
  jobs:  
  - job: docker_build
    steps:
    - task: AWSShellScript@1
      displayName: 'Login to ECR'
      inputs:
        regionName: 'us-west-2'
        scriptType: 'inline'
        inlineScript: |
            CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::897729136999:role/BuildServerRole --role-session-name BuildServerSession)

            # Extract the credentials from the JSON response
            AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')
            AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
            AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')
            
            # Export the credentials as environment variables
            export AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY
            export AWS_SESSION_TOKEN
            aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 897729136999.dkr.ecr.us-west-2.amazonaws.com
    # create a file called .env at $(System.DefaultWorkingDirectory)/backend/ai.chat.api/ and load it with variables
    - task: AWSShellScript@1
      displayName: 'Create .env file'
      inputs:
        regionName: 'us-west-2'
        scriptType: 'inline'
        inlineScript: |
          echo "BEDROCK_AWS_REGION=$(BEDROCK_AWS_REGION)" > "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "AWS_REGION=$(AWS_REGION)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "ALLOWED_ORIGINS=$(ALLOWED_ORIGINS)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "ENTRA_CLIENT_ID=$(ENTRA_CLIENT_ID)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "ENTRA_TENANT_ID=$(ENTRA_TENANT_ID)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "ENTRA_CLIENT_SECRET=$(ENTRA_CLIENT_SECRET)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "REDIRECT_URI=$(REDIRECT_URI)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "ADMIN_AGGREGATES_TABLE_NAME=$(ADMIN_AGGREGATES_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "CONVERSATIONS_TABLE_NAME=$(CONVERSATIONS_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "MESSAGES_TABLE_NAME=$(MESSAGES_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "MODEL_PRICING_TABLE_NAME=$(MODEL_PRICING_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "MODELS_TABLE_NAME=$(MODELS_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "SHARED_CONVERSATIONS_TABLE_NAME=$(SHARED_CONVERSATIONS_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "SHARED_MESSAGES_TABLE_NAME=$(SHARED_MESSAGES_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "USER_USAGE_TABLE_NAME=$(USER_USAGE_TABLE_NAME)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
          echo "FRONTEND_URL=$(FRONTEND_URL)" >> "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/.env"
    - task: AWSShellScript@1
      displayName: 'Build Docker Image'
      inputs:
        regionName: 'us-west-2'
        scriptType: 'inline'
        inlineScript: |
          cd "$(System.DefaultWorkingDirectory)/backend/ai.chat.api/"
          docker buildx build -f "Dockerfile" --force-rm -t boisestate.ai --label "com.microsoft.created-by=azure-devops" --label "com.microsoft.visual-studio.project-name=boisestate.ai" .
    - task: AWSShellScript@1 
      displayName: Push Docker Image
      inputs:
        regionName: 'us-west-2'
        scriptType: 'inline'
        inlineScript: |
            # Replace with your repository name
            REPO_NAME="boisestate.ai"

            # Check if the repository exists
            REPO_EXISTS=$(aws ecr describe-repositories --repository-names $REPO_NAME 2>&1)

            # If the repository does not exist, create it
            if echo "$REPO_EXISTS" | grep -q "RepositoryNotFoundException"; then
              aws ecr create-repository --repository-name $REPO_NAME
              echo "Repository $REPO_NAME created successfully."
            else
              echo "Repository $REPO_NAME already exists."
            fi
            docker tag $REPO_NAME:latest 897729136999.dkr.ecr.us-west-2.amazonaws.com/$REPO_NAME:latest

            docker push 897729136999.dkr.ecr.us-west-2.amazonaws.com/$REPO_NAME:latest
trigger:
  batch: true
  paths:
    include:
    - backend/ai.chat.api/Dockerfile
    - backend/ai.chat.api/docker-build.yaml
    exclude:
    - README.md 
  branches:
    include:
    - main